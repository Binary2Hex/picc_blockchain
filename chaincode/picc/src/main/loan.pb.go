// Code generated by protoc-gen-go.
// source: loan.proto
// DO NOT EDIT!

package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Loan struct {
	Farm        string        `protobuf:"bytes,1,opt,name=farm" json:"farm,omitempty"`
	LoanOfficer string        `protobuf:"bytes,2,opt,name=loanOfficer" json:"loanOfficer,omitempty"`
	Amount      int64         `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	LendDate    string        `protobuf:"bytes,4,opt,name=lendDate" json:"lendDate,omitempty"`
	RepayDate   string        `protobuf:"bytes,5,opt,name=repayDate" json:"repayDate,omitempty"`
	Trace       []*Loan_Trace `protobuf:"bytes,6,rep,name=trace" json:"trace,omitempty"`
	LoanId      string        `protobuf:"bytes,7,opt,name=loanId" json:"loanId,omitempty"`
}

func (m *Loan) Reset()                    { *m = Loan{} }
func (m *Loan) String() string            { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()               {}
func (*Loan) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Loan) GetTrace() []*Loan_Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type Loan_Trace struct {
	Date  string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	Event string `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *Loan_Trace) Reset()                    { *m = Loan_Trace{} }
func (m *Loan_Trace) String() string            { return proto.CompactTextString(m) }
func (*Loan_Trace) ProtoMessage()               {}
func (*Loan_Trace) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func init() {
	proto.RegisterType((*Loan)(nil), "main.Loan")
	proto.RegisterType((*Loan_Trace)(nil), "main.Loan.Trace")
}

func init() { proto.RegisterFile("loan.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x6b, 0x84, 0x30,
	0x10, 0x85, 0x51, 0x13, 0x5b, 0xc7, 0x4b, 0x19, 0x4a, 0x09, 0xd2, 0x83, 0xf4, 0x50, 0x3c, 0x05,
	0xda, 0xfe, 0x85, 0x5e, 0x0a, 0x85, 0x82, 0xf4, 0x0f, 0xa4, 0x1a, 0x41, 0xd0, 0x44, 0x42, 0xba,
	0xb0, 0xc7, 0xfd, 0xe7, 0xeb, 0x8c, 0xb2, 0xbb, 0xb7, 0x79, 0xef, 0x73, 0x9c, 0xf7, 0x02, 0x30,
	0x79, 0xe3, 0xf4, 0x12, 0x7c, 0xf4, 0x28, 0x66, 0x33, 0xba, 0x97, 0x53, 0x0a, 0xe2, 0x7b, 0x35,
	0x11, 0x41, 0x0c, 0x26, 0xcc, 0x2a, 0xa9, 0x93, 0xa6, 0x68, 0x79, 0xc6, 0x1a, 0x4a, 0x5a, 0xf8,
	0x19, 0x86, 0xb1, 0xb3, 0x41, 0xa5, 0x8c, 0x6e, 0x2d, 0x7c, 0x82, 0xdc, 0xcc, 0xfe, 0xdf, 0x45,
	0x95, 0xad, 0x30, 0x6b, 0x77, 0x85, 0x15, 0xdc, 0x4f, 0xd6, 0xf5, 0x9f, 0x26, 0x5a, 0x25, 0x78,
	0xed, 0xa2, 0xf1, 0x19, 0x8a, 0x60, 0x17, 0x73, 0x64, 0x28, 0x19, 0x5e, 0x0d, 0x7c, 0x05, 0x19,
	0x83, 0xe9, 0xac, 0xca, 0xeb, 0xac, 0x29, 0xdf, 0x1f, 0x34, 0xc5, 0xd4, 0x14, 0x51, 0xff, 0x92,
	0xdf, 0x6e, 0x98, 0x2e, 0x53, 0x90, 0xaf, 0x5e, 0xdd, 0xf1, 0x2f, 0x76, 0x55, 0xbd, 0x81, 0xe4,
	0xef, 0xa8, 0x50, 0x4f, 0x17, 0xf6, 0x42, 0x34, 0xe3, 0x23, 0x48, 0x7b, 0xb0, 0x6b, 0xda, 0xad,
	0xca, 0x26, 0xfe, 0x72, 0x7e, 0x90, 0x8f, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xc5, 0xd5,
	0x84, 0x1e, 0x01, 0x00, 0x00,
}
