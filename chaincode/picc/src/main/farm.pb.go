// Code generated by protoc-gen-go.
// source: farm.proto
// DO NOT EDIT!

package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Farm struct {
	ID          string            `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	BasicInfo   *Farm_BasicInfo   `protobuf:"bytes,2,opt,name=basicInfo" json:"basicInfo,omitempty"`
	FundingInfo *Farm_FundingInfo `protobuf:"bytes,3,opt,name=fundingInfo" json:"fundingInfo,omitempty"`
	Inventory   []*Farm_Inventory `protobuf:"bytes,4,rep,name=inventory" json:"inventory,omitempty"`
	Feed        []*Farm_Feed      `protobuf:"bytes,5,rep,name=feed" json:"feed,omitempty"`
	Vaccination *Farm_Vaccination `protobuf:"bytes,6,opt,name=vaccination" json:"vaccination,omitempty"`
	Sale        []*Farm_Sale      `protobuf:"bytes,7,rep,name=sale" json:"sale,omitempty"`
}

func (m *Farm) Reset()                    { *m = Farm{} }
func (m *Farm) String() string            { return proto.CompactTextString(m) }
func (*Farm) ProtoMessage()               {}
func (*Farm) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Farm) GetBasicInfo() *Farm_BasicInfo {
	if m != nil {
		return m.BasicInfo
	}
	return nil
}

func (m *Farm) GetFundingInfo() *Farm_FundingInfo {
	if m != nil {
		return m.FundingInfo
	}
	return nil
}

func (m *Farm) GetInventory() []*Farm_Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *Farm) GetFeed() []*Farm_Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *Farm) GetVaccination() *Farm_Vaccination {
	if m != nil {
		return m.Vaccination
	}
	return nil
}

func (m *Farm) GetSale() []*Farm_Sale {
	if m != nil {
		return m.Sale
	}
	return nil
}

type Farm_BasicInfo struct {
	Owner    string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Province string `protobuf:"bytes,3,opt,name=province" json:"province,omitempty"`
	City     string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Addr     string `protobuf:"bytes,5,opt,name=addr" json:"addr,omitempty"`
	Area     string `protobuf:"bytes,6,opt,name=area" json:"area,omitempty"`
	Quantity string `protobuf:"bytes,7,opt,name=quantity" json:"quantity,omitempty"`
	Species  string `protobuf:"bytes,8,opt,name=species" json:"species,omitempty"`
}

func (m *Farm_BasicInfo) Reset()                    { *m = Farm_BasicInfo{} }
func (m *Farm_BasicInfo) String() string            { return proto.CompactTextString(m) }
func (*Farm_BasicInfo) ProtoMessage()               {}
func (*Farm_BasicInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type Farm_FundingInfo struct {
	TotalAmount       int64  `protobuf:"varint,1,opt,name=totalAmount" json:"totalAmount,omitempty"`
	PaidIn            int64  `protobuf:"varint,2,opt,name=paidIn" json:"paidIn,omitempty"`
	Outlay            int64  `protobuf:"varint,3,opt,name=outlay" json:"outlay,omitempty"`
	PovertyRelief     int64  `protobuf:"varint,4,opt,name=povertyRelief" json:"povertyRelief,omitempty"`
	CreditRating      string `protobuf:"bytes,5,opt,name=creditRating" json:"creditRating,omitempty"`
	RegisteredCapital int64  `protobuf:"varint,6,opt,name=registeredCapital" json:"registeredCapital,omitempty"`
	RegisteredAsset   int64  `protobuf:"varint,7,opt,name=registeredAsset" json:"registeredAsset,omitempty"`
}

func (m *Farm_FundingInfo) Reset()                    { *m = Farm_FundingInfo{} }
func (m *Farm_FundingInfo) String() string            { return proto.CompactTextString(m) }
func (*Farm_FundingInfo) ProtoMessage()               {}
func (*Farm_FundingInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

// 存栏和出入栏信息--按年统计
type Farm_Inventory struct {
	Year      int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Init      int64 `protobuf:"varint,2,opt,name=init" json:"init,omitempty"`
	Import    int64 `protobuf:"varint,3,opt,name=import" json:"import,omitempty"`
	Born      int64 `protobuf:"varint,4,opt,name=born" json:"born,omitempty"`
	Butchery  int64 `protobuf:"varint,5,opt,name=butchery" json:"butchery,omitempty"`
	Sell      int64 `protobuf:"varint,6,opt,name=sell" json:"sell,omitempty"`
	Dead      int64 `protobuf:"varint,7,opt,name=dead" json:"dead,omitempty"`
	Insurance int64 `protobuf:"varint,8,opt,name=insurance" json:"insurance,omitempty"`
	UnderOne  int64 `protobuf:"varint,9,opt,name=underOne" json:"underOne,omitempty"`
	AboveOne  int64 `protobuf:"varint,10,opt,name=aboveOne" json:"aboveOne,omitempty"`
}

func (m *Farm_Inventory) Reset()                    { *m = Farm_Inventory{} }
func (m *Farm_Inventory) String() string            { return proto.CompactTextString(m) }
func (*Farm_Inventory) ProtoMessage()               {}
func (*Farm_Inventory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

// 养殖投料信息--按年统计
type Farm_Feed struct {
	Year  int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Type1 int64 `protobuf:"varint,2,opt,name=type1" json:"type1,omitempty"`
	Type2 int64 `protobuf:"varint,3,opt,name=type2" json:"type2,omitempty"`
}

func (m *Farm_Feed) Reset()                    { *m = Farm_Feed{} }
func (m *Farm_Feed) String() string            { return proto.CompactTextString(m) }
func (*Farm_Feed) ProtoMessage()               {}
func (*Farm_Feed) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 3} }

// 记录免疫信息，由防疫站直接写入..不需要统计信息
type Farm_Vaccination struct {
	VaccinationRate   []*Farm_Vaccination_VaccinationRate `protobuf:"bytes,1,rep,name=vaccinationRate" json:"vaccinationRate,omitempty"`
	EarLabelMatchRate string                              `protobuf:"bytes,2,opt,name=earLabelMatchRate" json:"earLabelMatchRate,omitempty"`
}

func (m *Farm_Vaccination) Reset()                    { *m = Farm_Vaccination{} }
func (m *Farm_Vaccination) String() string            { return proto.CompactTextString(m) }
func (*Farm_Vaccination) ProtoMessage()               {}
func (*Farm_Vaccination) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 4} }

func (m *Farm_Vaccination) GetVaccinationRate() []*Farm_Vaccination_VaccinationRate {
	if m != nil {
		return m.VaccinationRate
	}
	return nil
}

// 免疫实施率
type Farm_Vaccination_VaccinationRate struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Rate string `protobuf:"bytes,2,opt,name=rate" json:"rate,omitempty"`
}

func (m *Farm_Vaccination_VaccinationRate) Reset()         { *m = Farm_Vaccination_VaccinationRate{} }
func (m *Farm_Vaccination_VaccinationRate) String() string { return proto.CompactTextString(m) }
func (*Farm_Vaccination_VaccinationRate) ProtoMessage()    {}
func (*Farm_Vaccination_VaccinationRate) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 4, 0}
}

type Farm_Sale struct {
	Date              string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	Amount            int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	EarLabelMatchRate string `protobuf:"bytes,3,opt,name=earLabelMatchRate" json:"earLabelMatchRate,omitempty"`
	TotalBeefAmount   string `protobuf:"bytes,4,opt,name=totalBeefAmount" json:"totalBeefAmount,omitempty"`
	BeefRatio         string `protobuf:"bytes,5,opt,name=beefRatio" json:"beefRatio,omitempty"`
	MarbledRatio      string `protobuf:"bytes,6,opt,name=marbledRatio" json:"marbledRatio,omitempty"`
	ResellAmount      int64  `protobuf:"varint,7,opt,name=resellAmount" json:"resellAmount,omitempty"`
}

func (m *Farm_Sale) Reset()                    { *m = Farm_Sale{} }
func (m *Farm_Sale) String() string            { return proto.CompactTextString(m) }
func (*Farm_Sale) ProtoMessage()               {}
func (*Farm_Sale) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 5} }

func init() {
	proto.RegisterType((*Farm)(nil), "main.Farm")
	proto.RegisterType((*Farm_BasicInfo)(nil), "main.Farm.BasicInfo")
	proto.RegisterType((*Farm_FundingInfo)(nil), "main.Farm.FundingInfo")
	proto.RegisterType((*Farm_Inventory)(nil), "main.Farm.Inventory")
	proto.RegisterType((*Farm_Feed)(nil), "main.Farm.Feed")
	proto.RegisterType((*Farm_Vaccination)(nil), "main.Farm.Vaccination")
	proto.RegisterType((*Farm_Vaccination_VaccinationRate)(nil), "main.Farm.Vaccination.VaccinationRate")
	proto.RegisterType((*Farm_Sale)(nil), "main.Farm.Sale")
}

func init() { proto.RegisterFile("farm.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 699 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0xe2, 0xa4, 0x6d, 0x36, 0x85, 0x88, 0x55, 0x55, 0x59, 0x16, 0x87, 0xaa, 0x20, 0xd4,
	0x03, 0x8a, 0x44, 0xb9, 0xc0, 0xb1, 0xa5, 0xaa, 0x14, 0x09, 0x04, 0x5a, 0x24, 0xee, 0x6b, 0x7b,
	0x52, 0x56, 0x72, 0xd6, 0x66, 0xbd, 0x09, 0xca, 0x91, 0x1b, 0xff, 0x8b, 0x0b, 0x3f, 0x87, 0x2b,
	0x37, 0x76, 0x66, 0xd7, 0xb1, 0xf3, 0xc1, 0x6d, 0xe6, 0xcd, 0xec, 0xee, 0xbc, 0x99, 0x79, 0x36,
	0x63, 0x73, 0x69, 0x16, 0xd3, 0xca, 0x94, 0xb6, 0xe4, 0x83, 0x85, 0x54, 0xfa, 0xf2, 0xe7, 0x29,
	0x1b, 0xdc, 0x3b, 0x90, 0x3f, 0x66, 0xfd, 0xd9, 0x5d, 0xdc, 0xbb, 0xe8, 0x5d, 0x8d, 0x44, 0x5f,
	0xdd, 0xf1, 0x6b, 0x36, 0x4a, 0x65, 0xad, 0xb2, 0x99, 0x9e, 0x97, 0x71, 0xdf, 0xc1, 0xe3, 0xeb,
	0xb3, 0x29, 0x1e, 0x99, 0x62, 0xfa, 0xf4, 0xb6, 0x89, 0x89, 0x36, 0x8d, 0xbf, 0x61, 0xe3, 0xf9,
	0x52, 0xe7, 0x4a, 0x3f, 0xd0, 0xa9, 0x88, 0x4e, 0x9d, 0x77, 0x4e, 0xdd, 0xb7, 0x51, 0xd1, 0x4d,
	0xc5, 0xd7, 0x94, 0x5e, 0x81, 0xb6, 0xa5, 0x59, 0xc7, 0x83, 0x8b, 0x68, 0xe7, 0xb5, 0x59, 0x13,
	0x13, 0x6d, 0x1a, 0x7f, 0xc6, 0x06, 0x73, 0x80, 0x3c, 0x1e, 0x52, 0xfa, 0xa4, 0xfb, 0x8c, 0x83,
	0x05, 0x05, 0xb1, 0xa4, 0x95, 0xcc, 0x32, 0xa5, 0xa5, 0x55, 0xa5, 0x8e, 0x8f, 0xf6, 0x4a, 0xfa,
	0xd2, 0x46, 0x45, 0x37, 0x15, 0xaf, 0xaf, 0x65, 0x01, 0xf1, 0xf1, 0xde, 0xf5, 0x9f, 0x1d, 0x2c,
	0x28, 0x98, 0xfc, 0xea, 0xb1, 0xd1, 0xa6, 0x15, 0xfc, 0x8c, 0x0d, 0xcb, 0xef, 0x1a, 0x4c, 0x68,
	0xa3, 0x77, 0x38, 0x67, 0x03, 0x2d, 0x17, 0x40, 0x4d, 0x1c, 0x09, 0xb2, 0x79, 0xc2, 0x4e, 0xdc,
	0x14, 0x56, 0x4a, 0x67, 0x40, 0x6d, 0x1a, 0x89, 0x8d, 0x8f, 0xf9, 0x99, 0xb2, 0xd8, 0x06, 0xca,
	0x47, 0x1b, 0x31, 0x99, 0xe7, 0xc6, 0x71, 0x25, 0x0c, 0x6d, 0xc2, 0x0c, 0x48, 0xe2, 0x84, 0x98,
	0xb3, 0xf1, 0xde, 0x6f, 0x4b, 0xa9, 0x2d, 0x9e, 0x3f, 0xf6, 0xf7, 0x36, 0x3e, 0x8f, 0xd9, 0x71,
	0x5d, 0x41, 0xa6, 0xa0, 0x8e, 0x4f, 0x28, 0xd4, 0xb8, 0xc9, 0x8f, 0x3e, 0x1b, 0x77, 0x46, 0xc3,
	0x2f, 0xd8, 0xd8, 0x96, 0x56, 0x16, 0x37, 0x8b, 0x72, 0xa9, 0x2d, 0xb1, 0x89, 0x44, 0x17, 0xe2,
	0xe7, 0xec, 0xa8, 0x92, 0x2a, 0x9f, 0x69, 0x62, 0x15, 0x89, 0xe0, 0x21, 0x5e, 0x2e, 0x6d, 0x21,
	0xd7, 0xc4, 0xca, 0xe1, 0xde, 0xe3, 0xcf, 0xd9, 0xa3, 0xaa, 0x5c, 0x81, 0xb1, 0x6b, 0x01, 0x85,
	0x82, 0x39, 0x91, 0x8b, 0xc4, 0x36, 0xc8, 0x2f, 0xd9, 0x69, 0x66, 0x20, 0x57, 0x56, 0xb8, 0x11,
	0xe8, 0x87, 0xc0, 0x76, 0x0b, 0xe3, 0x2f, 0xd9, 0x13, 0x03, 0x0f, 0xaa, 0xb6, 0xe0, 0xd0, 0x77,
	0xb2, 0x52, 0xae, 0x28, 0x6a, 0x41, 0x24, 0xf6, 0x03, 0xfc, 0x8a, 0x4d, 0x5a, 0xf0, 0xa6, 0xae,
	0xc1, 0x52, 0x5b, 0x22, 0xb1, 0x0b, 0x27, 0x7f, 0xdd, 0x24, 0x37, 0x6b, 0x86, 0xbd, 0x5d, 0x83,
	0xf4, 0x83, 0x1c, 0x0a, 0xb2, 0x11, 0x53, 0x5a, 0xd9, 0xc0, 0x98, 0x6c, 0xe4, 0xab, 0x16, 0x55,
	0x69, 0x6c, 0xc3, 0xd7, 0x7b, 0x98, 0x9b, 0x96, 0x46, 0x07, 0x9a, 0x64, 0xe3, 0x6c, 0xd2, 0xa5,
	0xcd, 0xbe, 0x82, 0x5b, 0xf1, 0x21, 0xe1, 0x1b, 0x1f, 0xf3, 0x6b, 0x28, 0x1a, 0x22, 0x64, 0x23,
	0x96, 0x83, 0xcc, 0x43, 0xc1, 0x64, 0xf3, 0xa7, 0xa8, 0x93, 0x7a, 0x69, 0x24, 0x2e, 0xce, 0x09,
	0x05, 0x5a, 0x00, 0x5f, 0x70, 0x53, 0x04, 0xf3, 0x51, 0x43, 0x3c, 0xf2, 0x2f, 0x34, 0x3e, 0xc6,
	0x64, 0xea, 0xba, 0x8d, 0x31, 0xe6, 0x63, 0x8d, 0x9f, 0xdc, 0xbb, 0x6f, 0x00, 0x8a, 0xe5, 0x10,
	0x6b, 0xb7, 0xd3, 0x76, 0x5d, 0xc1, 0xab, 0x40, 0xdb, 0x3b, 0x0d, 0x7a, 0x1d, 0x68, 0x7b, 0x27,
	0xf9, 0xdd, 0x63, 0xe3, 0x8e, 0x9e, 0xf8, 0x27, 0x36, 0xe9, 0x28, 0xca, 0x0d, 0x10, 0xdc, 0xd5,
	0xa8, 0xa6, 0x17, 0x87, 0x05, 0xb8, 0x25, 0x46, 0x97, 0x2d, 0x76, 0x8f, 0xe3, 0xf4, 0x5d, 0x51,
	0xef, 0x65, 0x0a, 0xc5, 0x07, 0xe9, 0x7a, 0x47, 0x77, 0x7a, 0x61, 0xed, 0x07, 0x92, 0xb7, 0x6c,
	0xb2, 0x73, 0x23, 0x52, 0xc4, 0x5a, 0x83, 0x42, 0xc9, 0x46, 0xcc, 0xb4, 0xf7, 0x90, 0x9d, 0xfc,
	0xe9, 0xb1, 0x01, 0xea, 0x9c, 0xa6, 0xe0, 0x0b, 0xa7, 0x20, 0xda, 0x38, 0x75, 0xe9, 0xa5, 0x11,
	0xb6, 0xdf, 0x7b, 0x87, 0xab, 0x8b, 0xfe, 0x53, 0x1d, 0xee, 0x26, 0x49, 0xea, 0x16, 0x60, 0x1e,
	0x94, 0xe6, 0x25, 0xbf, 0x0b, 0xe3, 0xd4, 0x53, 0xe7, 0xa1, 0x02, 0xca, 0x20, 0x8a, 0x16, 0x40,
	0xd5, 0x2c, 0xa4, 0x49, 0x0b, 0xf7, 0xcd, 0xa3, 0x04, 0xff, 0x3d, 0xd8, 0xc2, 0x30, 0xc7, 0x00,
	0x6e, 0x55, 0x78, 0xc8, 0xef, 0xd4, 0x16, 0x96, 0x1e, 0xd1, 0x7f, 0xe1, 0xf5, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc2, 0xdc, 0x8f, 0xfe, 0x25, 0x06, 0x00, 0x00,
}
