// Code generated by protoc-gen-go.
// source: farm.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	farm.proto

It has these top-level messages:
	Farm
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Farm struct {
	ID          string            `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	BasicInfo   *Farm_BasicInfo   `protobuf:"bytes,2,opt,name=basicInfo" json:"basicInfo,omitempty"`
	FundingInfo *Farm_FundingInfo `protobuf:"bytes,3,opt,name=fundingInfo" json:"fundingInfo,omitempty"`
	Inventory   []*Farm_Inventory `protobuf:"bytes,4,rep,name=inventory" json:"inventory,omitempty"`
	Feed        []*Farm_Feed      `protobuf:"bytes,5,rep,name=feed" json:"feed,omitempty"`
}

func (m *Farm) Reset()                    { *m = Farm{} }
func (m *Farm) String() string            { return proto.CompactTextString(m) }
func (*Farm) ProtoMessage()               {}
func (*Farm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Farm) GetBasicInfo() *Farm_BasicInfo {
	if m != nil {
		return m.BasicInfo
	}
	return nil
}

func (m *Farm) GetFundingInfo() *Farm_FundingInfo {
	if m != nil {
		return m.FundingInfo
	}
	return nil
}

func (m *Farm) GetInventory() []*Farm_Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *Farm) GetFeed() []*Farm_Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

type Farm_BasicInfo struct {
	Owner    string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Addr     string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Area     string `protobuf:"bytes,3,opt,name=area" json:"area,omitempty"`
	Quantity string `protobuf:"bytes,4,opt,name=quantity" json:"quantity,omitempty"`
	Species  string `protobuf:"bytes,5,opt,name=species" json:"species,omitempty"`
}

func (m *Farm_BasicInfo) Reset()                    { *m = Farm_BasicInfo{} }
func (m *Farm_BasicInfo) String() string            { return proto.CompactTextString(m) }
func (*Farm_BasicInfo) ProtoMessage()               {}
func (*Farm_BasicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Farm_FundingInfo struct {
	TotalAmount   string `protobuf:"bytes,1,opt,name=totalAmount" json:"totalAmount,omitempty"`
	PaidIn        string `protobuf:"bytes,2,opt,name=paidIn" json:"paidIn,omitempty"`
	Outlay        string `protobuf:"bytes,3,opt,name=outlay" json:"outlay,omitempty"`
	PovertyRelief string `protobuf:"bytes,4,opt,name=povertyRelief" json:"povertyRelief,omitempty"`
}

func (m *Farm_FundingInfo) Reset()                    { *m = Farm_FundingInfo{} }
func (m *Farm_FundingInfo) String() string            { return proto.CompactTextString(m) }
func (*Farm_FundingInfo) ProtoMessage()               {}
func (*Farm_FundingInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

// 存栏和出入栏信息--按年统计
type Farm_Inventory struct {
	Year      int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Init      int64 `protobuf:"varint,2,opt,name=init" json:"init,omitempty"`
	Import    int64 `protobuf:"varint,3,opt,name=import" json:"import,omitempty"`
	Born      int64 `protobuf:"varint,4,opt,name=born" json:"born,omitempty"`
	Butchery  int64 `protobuf:"varint,5,opt,name=butchery" json:"butchery,omitempty"`
	Sell      int64 `protobuf:"varint,6,opt,name=sell" json:"sell,omitempty"`
	Dead      int64 `protobuf:"varint,7,opt,name=dead" json:"dead,omitempty"`
	Insurance int64 `protobuf:"varint,8,opt,name=insurance" json:"insurance,omitempty"`
	UnderOne  int64 `protobuf:"varint,9,opt,name=underOne" json:"underOne,omitempty"`
	AboveOne  int64 `protobuf:"varint,10,opt,name=aboveOne" json:"aboveOne,omitempty"`
}

func (m *Farm_Inventory) Reset()                    { *m = Farm_Inventory{} }
func (m *Farm_Inventory) String() string            { return proto.CompactTextString(m) }
func (*Farm_Inventory) ProtoMessage()               {}
func (*Farm_Inventory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

// 养殖投料信息--按年统计
type Farm_Feed struct {
	Year  int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Type1 int64 `protobuf:"varint,2,opt,name=type1" json:"type1,omitempty"`
	Type2 int64 `protobuf:"varint,3,opt,name=type2" json:"type2,omitempty"`
}

func (m *Farm_Feed) Reset()                    { *m = Farm_Feed{} }
func (m *Farm_Feed) String() string            { return proto.CompactTextString(m) }
func (*Farm_Feed) ProtoMessage()               {}
func (*Farm_Feed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func init() {
	proto.RegisterType((*Farm)(nil), "main.Farm")
	proto.RegisterType((*Farm_BasicInfo)(nil), "main.Farm.BasicInfo")
	proto.RegisterType((*Farm_FundingInfo)(nil), "main.Farm.FundingInfo")
	proto.RegisterType((*Farm_Inventory)(nil), "main.Farm.Inventory")
	proto.RegisterType((*Farm_Feed)(nil), "main.Farm.Feed")
}

func init() { proto.RegisterFile("farm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0xbd, 0xae, 0xd3, 0x30,
	0x14, 0x56, 0xdb, 0xb4, 0xf7, 0xe6, 0x54, 0x80, 0x64, 0x5d, 0x5d, 0x59, 0x11, 0x43, 0x05, 0x0c,
	0x4c, 0x95, 0x28, 0x0b, 0x2b, 0xe8, 0xaa, 0x52, 0x27, 0x24, 0xbf, 0x81, 0xd3, 0x9c, 0x80, 0xa5,
	0xd4, 0x0e, 0x8e, 0x53, 0x94, 0x89, 0x89, 0x97, 0xe1, 0x0d, 0xd9, 0xf0, 0xb1, 0x9d, 0x26, 0x20,
	0xb6, 0xf3, 0xfd, 0x58, 0xdf, 0xf9, 0x1c, 0x07, 0xa0, 0x96, 0xf6, 0xb2, 0x6f, 0xad, 0x71, 0x86,
	0x65, 0x17, 0xa9, 0xf4, 0xab, 0x5f, 0x1b, 0xc8, 0x8e, 0x9e, 0x64, 0xcf, 0x61, 0x79, 0x7a, 0xe2,
	0x8b, 0xdd, 0xe2, 0x6d, 0x2e, 0x96, 0xea, 0x89, 0x1d, 0x20, 0x2f, 0x65, 0xa7, 0xce, 0x27, 0x5d,
	0x1b, 0xbe, 0xf4, 0xf4, 0xf6, 0xf0, 0xb0, 0xa7, 0x23, 0x7b, 0xb2, 0xef, 0x3f, 0x8d, 0x9a, 0x98,
	0x6c, 0xec, 0x03, 0x6c, 0xeb, 0x5e, 0x57, 0x4a, 0x7f, 0x09, 0xa7, 0x56, 0xe1, 0xd4, 0xe3, 0xec,
	0xd4, 0x71, 0x52, 0xc5, 0xdc, 0x4a, 0x69, 0x4a, 0x5f, 0x51, 0x3b, 0x63, 0x07, 0x9e, 0xed, 0x56,
	0xff, 0xa4, 0x9d, 0x46, 0x4d, 0x4c, 0x36, 0xf6, 0x1a, 0xb2, 0x1a, 0xb1, 0xe2, 0xeb, 0x60, 0x7f,
	0x31, 0x8f, 0xf1, 0xb4, 0x08, 0x62, 0xf1, 0x03, 0xf2, 0xdb, 0xaa, 0xec, 0x01, 0xd6, 0xe6, 0xbb,
	0x46, 0x9b, 0x6a, 0x46, 0xc0, 0x18, 0x64, 0xb2, 0xaa, 0x6c, 0x28, 0x99, 0x8b, 0x30, 0x07, 0xce,
	0xa2, 0x0c, 0x15, 0x88, 0xf3, 0x33, 0x2b, 0xe0, 0xfe, 0x5b, 0x2f, 0xb5, 0x53, 0x8e, 0x56, 0x24,
	0xfe, 0x86, 0x19, 0x87, 0xbb, 0xae, 0xc5, 0xb3, 0xc2, 0xce, 0xaf, 0x43, 0xd2, 0x08, 0x8b, 0x9f,
	0x0b, 0xd8, 0xce, 0x6a, 0xb3, 0x1d, 0x6c, 0x9d, 0x71, 0xb2, 0xf9, 0x78, 0x31, 0xbd, 0x76, 0x69,
	0x93, 0x39, 0xc5, 0x1e, 0x61, 0xd3, 0x4a, 0x55, 0x9d, 0x74, 0xda, 0x28, 0x21, 0xe2, 0x4d, 0xef,
	0x1a, 0x39, 0xa4, 0xad, 0x12, 0x62, 0x6f, 0xe0, 0x59, 0x6b, 0xae, 0x68, 0xdd, 0x20, 0xb0, 0x51,
	0x58, 0xa7, 0xe5, 0xfe, 0x26, 0x8b, 0xdf, 0x0b, 0xc8, 0x6f, 0xd7, 0x48, 0xfd, 0x06, 0x94, 0xf1,
	0x22, 0xd6, 0x22, 0xcc, 0xc4, 0x29, 0xad, 0x5c, 0x48, 0x5d, 0x89, 0x30, 0x53, 0xa6, 0xba, 0xb4,
	0xc6, 0xba, 0x90, 0xb9, 0x12, 0x09, 0x91, 0xb7, 0x34, 0x56, 0x87, 0x28, 0xef, 0xa5, 0x99, 0xee,
	0xa7, 0xec, 0xdd, 0xf9, 0x2b, 0xfa, 0x4f, 0xb8, 0x0e, 0xfc, 0x0d, 0x93, 0xbf, 0xc3, 0xa6, 0xe1,
	0x9b, 0xe8, 0xa7, 0x99, 0xb8, 0x0a, 0x65, 0xc5, 0xef, 0x22, 0x47, 0x33, 0x7b, 0x49, 0xef, 0xa0,
	0xeb, 0xad, 0xd4, 0x67, 0xe4, 0xf7, 0x41, 0x98, 0x08, 0x4a, 0xf0, 0x37, 0x89, 0xf6, 0xb3, 0x46,
	0x9e, 0xc7, 0x84, 0x11, 0x93, 0x26, 0x4b, 0xdf, 0x98, 0x34, 0x88, 0xda, 0x88, 0x8b, 0xa3, 0x7f,
	0xe3, 0xfe, 0x31, 0xfc, 0xb7, 0xb5, 0x7f, 0x13, 0x6e, 0x68, 0xf1, 0x5d, 0xaa, 0x1d, 0xc1, 0xc8,
	0x1e, 0x52, 0xed, 0x08, 0xca, 0x4d, 0xf8, 0x73, 0xde, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x7c,
	0x53, 0x38, 0x9f, 0x47, 0x03, 0x00, 0x00,
}
